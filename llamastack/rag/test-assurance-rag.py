#!/usr/bin/env python3
"""
Script de test RAG pour le use case assurance
Teste la fonctionnalit√© RAG avec des documents d'assurance
"""

import os
import uuid
from llama_stack_client import Client, Agent, AgentEventLogger

def test_assurance_rag():
    """Test de la fonctionnalit√© RAG pour l'assurance"""
    
    # Configuration
    LLAMA_STACK_URL = os.getenv('LLAMA_STACK_URL', 'http://localhost:8321')
    MODEL_ID = os.getenv('MODEL_ID', 'llama-32-1b-instruct')
    VECTOR_DB_ID = os.getenv('VECTOR_DB_ID', 'assurance_milvus_db')
    
    print(f"üîó Connexion √† LlamaStack: {LLAMA_STACK_URL}")
    print(f"ü§ñ Mod√®le: {MODEL_ID}")
    print(f"üóÑÔ∏è  Base vectorielle: {VECTOR_DB_ID}")
    print("üè¢ Use Case: Assurance")
    print("-" * 60)
    
    try:
        # Connexion au client LlamaStack
        client = Client(base_url=LLAMA_STACK_URL)
        print("‚úÖ Connexion √† LlamaStack r√©ussie")
        
        # V√©rifier que la base vectorielle existe
        print(f"\nüóÑÔ∏è  V√©rification de la base '{VECTOR_DB_ID}'...")
        vector_dbs = client.vector_dbs.list()
        target_db = next((db for db in vector_dbs if db.identifier == VECTOR_DB_ID), None)
        
        if not target_db:
            print(f"‚ö†Ô∏è  Base vectorielle '{VECTOR_DB_ID}' non trouv√©e")
            print("   Bases disponibles:")
            for db in vector_dbs:
                print(f"   - {db.identifier}")
            return False
        
        print(f"‚úÖ Base vectorielle trouv√©e: {target_db.identifier}")
        
        # Cr√©er un agent RAG sp√©cialis√© assurance
        print("\nü§ñ Cr√©ation de l'agent RAG Assurance...")
        assurance_agent = Agent(
            client,
            model=MODEL_ID,
            instructions="""Tu es un expert en assurance sp√©cialis√© dans l'analyse de documents d'assurance. 
            Tu peux r√©pondre aux questions sur les polices d'assurance, les garanties, les exclusions, 
            les proc√©dures de sinistre et les aspects r√©glementaires. Utilise les informations de la 
            base de connaissances pour fournir des r√©ponses pr√©cises et utiles.""",
            tools=[
                {
                    "name": "builtin::rag/knowledge_search",
                    "args": {"vector_db_ids": [VECTOR_DB_ID]},
                }
            ],
        )
        print("‚úÖ Agent RAG Assurance cr√©√©")
        
        # Questions sp√©cifiques √† l'assurance
        assurance_questions = [
            "Quelles sont les garanties de base d'une assurance auto ?",
            "Comment fonctionne la proc√©dure de d√©claration de sinistre ?",
            "Quelles sont les exclusions courantes dans les polices d'assurance ?",
            "Quels sont les facteurs qui influencent le prix d'une assurance ?",
            "Quelles sont les obligations de l'assur√© en cas de sinistre ?",
            "Comment choisir la bonne couverture d'assurance ?",
            "Quels sont les d√©lais de prescription en assurance ?",
            "Comment fonctionne la franchise en assurance ?"
        ]
        
        print(f"\nüîç Test de {len(assurance_questions)} questions d'assurance...")
        
        for i, question in enumerate(assurance_questions, 1):
            print(f"\nüìù Question {i}: {question}")
            
            # Cr√©er une session
            session_id = assurance_agent.create_session(session_name=f"assurance_session_{uuid.uuid4().hex[:8]}")
            
            # Envoyer la requ√™te
            response = assurance_agent.create_turn(
                messages=[{"role": "user", "content": question}],
                session_id=session_id,
                stream=True,
            )
            
            # Afficher la r√©ponse
            print("üí¨ R√©ponse:")
            response_content = ""
            for log in AgentEventLogger().log(response):
                if hasattr(log, 'content') and log.content:
                    response_content += log.content
                    print(f"  {log.content}", end='', flush=True)
            
            # Analyser la r√©ponse
            if response_content.strip():
                print(f"\n‚úÖ R√©ponse re√ßue ({len(response_content)} caract√®res)")
            else:
                print(f"\n‚ö†Ô∏è  Aucune r√©ponse re√ßue")
            
            print("\n" + "-" * 40)
        
        # Test de requ√™te directe sur la base vectorielle
        print("\nüîç Test de requ√™te directe sur la base vectorielle...")
        assurance_queries = [
            "assurance automobile garanties",
            "sinistre proc√©dure d√©claration",
            "exclusions police assurance",
            "franchise conditions"
        ]
        
        for query in assurance_queries:
            print(f"\nüîé Requ√™te: '{query}'")
            try:
                query_result = client.vector_io.query(
                    vector_db_id=VECTOR_DB_ID,
                    query=query,
                )
                
                if query_result and hasattr(query_result, 'results') and query_result.results:
                    print(f"‚úÖ {len(query_result.results)} r√©sultats trouv√©s")
                    for j, result in enumerate(query_result.results[:2], 1):  # Afficher les 2 premiers
                        print(f"  R√©sultat {j}: {result.content[:150]}...")
                else:
                    print("‚ÑπÔ∏è  Aucun r√©sultat trouv√©")
                    
            except Exception as e:
                print(f"‚ùå Erreur lors de la requ√™te: {e}")
        
        print("\nüéâ Tests RAG Assurance termin√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test RAG Assurance: {e}")
        return False

def test_assurance_scenarios():
    """Test de sc√©narios d'assurance sp√©cifiques"""
    
    LLAMA_STACK_URL = os.getenv('LLAMA_STACK_URL', 'http://localhost:8321')
    MODEL_ID = os.getenv('MODEL_ID', 'llama-32-1b-instruct')
    VECTOR_DB_ID = os.getenv('VECTOR_DB_ID', 'assurance_milvus_db')
    
    print(f"\nüé≠ Test de sc√©narios d'assurance...")
    
    try:
        client = Client(base_url=LLAMA_STACK_URL)
        
        # Sc√©narios d'assurance
        scenarios = [
            {
                "name": "Accident de voiture",
                "question": "J'ai eu un accident de voiture hier. Que dois-je faire dans les 24h qui suivent ?"
            },
            {
                "name": "Vol √† domicile",
                "question": "Mon appartement a √©t√© cambriol√©. Quelles sont mes obligations vis-√†-vis de mon assureur ?"
            },
            {
                "name": "D√©g√¢t des eaux",
                "question": "J'ai un d√©g√¢t des eaux dans ma salle de bain. Comment proc√©der pour √™tre indemnis√© ?"
            },
            {
                "name": "R√©siliation d'assurance",
                "question": "Je veux changer d'assureur. Quels sont les d√©lais de pr√©avis et les formalit√©s ?"
            }
        ]
        
        assurance_agent = Agent(
            client,
            model=MODEL_ID,
            instructions="Tu es un expert en assurance. R√©ponds aux questions en te basant sur les documents d'assurance disponibles.",
            tools=[
                {
                    "name": "builtin::rag/knowledge_search",
                    "args": {"vector_db_ids": [VECTOR_DB_ID]},
                }
            ],
        )
        
        for scenario in scenarios:
            print(f"\nüé≠ Sc√©nario: {scenario['name']}")
            print(f"‚ùì Question: {scenario['question']}")
            
            session_id = assurance_agent.create_session(session_name=f"scenario_{uuid.uuid4().hex[:8]}")
            response = assurance_agent.create_turn(
                messages=[{"role": "user", "content": scenario['question']}],
                session_id=session_id,
                stream=True,
            )
            
            print("üí¨ R√©ponse:")
            for log in AgentEventLogger().log(response):
                if hasattr(log, 'content') and log.content:
                    print(f"  {log.content}", end='', flush=True)
            print("\n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des sc√©narios: {e}")
        return False

if __name__ == "__main__":
    print("üè¢ Test de la fonctionnalit√© RAG - Use Case Assurance")
    print("=" * 70)
    
    # Test principal RAG assurance
    rag_success = test_assurance_rag()
    
    # Test des sc√©narios
    scenarios_success = test_assurance_scenarios()
    
    # R√©sum√©
    print("\n" + "=" * 70)
    print("üìä R√âSUM√â DES TESTS ASSURANCE")
    print("=" * 70)
    print(f"RAG Assurance: {'‚úÖ SUCCESS' if rag_success else '‚ùå FAILED'}")
    print(f"Sc√©narios Assurance: {'‚úÖ SUCCESS' if scenarios_success else '‚ùå FAILED'}")
    
    if rag_success and scenarios_success:
        print("\nüéâ Tous les tests assurance sont pass√©s avec succ√®s!")
        print("üè¢ Le syst√®me RAG est pr√™t pour le use case assurance!")
    else:
        print("\n‚ö†Ô∏è  Certains tests assurance ont √©chou√©.")
        print("   V√©rifiez que les documents d'assurance ont √©t√© ing√©r√©s correctement.")
