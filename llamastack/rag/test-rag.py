#!/usr/bin/env python3
"""
Script de test pour la fonctionnalit√© RAG avec LlamaStack
Bas√© sur la documentation Red Hat OpenShift AI
"""

import os
import uuid
from llama_stack_client import Client, Agent, AgentEventLogger

def test_rag_functionality():
    """Test de la fonctionnalit√© RAG avec LlamaStack"""
    
    # Configuration
    LLAMA_STACK_URL = os.getenv('LLAMA_STACK_URL', 'http://localhost:8321')
    MODEL_ID = os.getenv('MODEL_ID', 'llama-32-1b-instruct')
    VECTOR_DB_ID = os.getenv('VECTOR_DB_ID', 'my_milvus_db')
    
    print(f"üîó Connexion √† LlamaStack: {LLAMA_STACK_URL}")
    print(f"ü§ñ Mod√®le: {MODEL_ID}")
    print(f"üóÑÔ∏è  Base vectorielle: {VECTOR_DB_ID}")
    print("-" * 50)
    
    try:
        # Connexion au client LlamaStack
        client = Client(base_url=LLAMA_STACK_URL)
        print("‚úÖ Connexion √† LlamaStack r√©ussie")
        
        # Lister les mod√®les disponibles
        print("\nüìã Mod√®les disponibles:")
        models = client.models.list()
        for model in models:
            print(f"  - {model.identifier} ({model.model_type})")
        
        # V√©rifier que le mod√®le LLM est disponible
        llm_model = next((m for m in models if m.model_type == "llm"), None)
        if not llm_model:
            print("‚ùå Aucun mod√®le LLM trouv√©")
            return False
        
        print(f"‚úÖ Mod√®le LLM trouv√©: {llm_model.identifier}")
        
        # V√©rifier les bases vectorielles disponibles
        print("\nüóÑÔ∏è  Bases vectorielles disponibles:")
        vector_dbs = client.vector_dbs.list()
        for db in vector_dbs:
            print(f"  - {db.identifier}")
        
        # V√©rifier que la base vectorielle existe
        target_db = next((db for db in vector_dbs if db.identifier == VECTOR_DB_ID), None)
        if not target_db:
            print(f"‚ùå Base vectorielle '{VECTOR_DB_ID}' non trouv√©e")
            return False
        
        print(f"‚úÖ Base vectorielle trouv√©e: {target_db.identifier}")
        
        # Cr√©er un agent RAG
        print("\nü§ñ Cr√©ation de l'agent RAG...")
        rag_agent = Agent(
            client,
            model=llm_model.identifier,
            instructions="Tu es un assistant IA sp√©cialis√© dans l'analyse de documents. Utilise les informations de la base de connaissances pour r√©pondre aux questions.",
            tools=[
                {
                    "name": "builtin::rag/knowledge_search",
                    "args": {"vector_db_ids": [VECTOR_DB_ID]},
                }
            ],
        )
        print("‚úÖ Agent RAG cr√©√©")
        
        # Test de requ√™te RAG
        print("\nüîç Test de requ√™te RAG...")
        test_questions = [
            "Que sais-tu sur les documents que tu as analys√©s ?",
            "Peux-tu me donner un r√©sum√© des informations disponibles ?",
            "Y a-t-il des d√©tails techniques importants dans les documents ?"
        ]
        
        for i, question in enumerate(test_questions, 1):
            print(f"\nüìù Question {i}: {question}")
            
            # Cr√©er une session
            session_id = rag_agent.create_session(session_name=f"test_session_{uuid.uuid4().hex[:8]}")
            
            # Envoyer la requ√™te
            response = rag_agent.create_turn(
                messages=[{"role": "user", "content": question}],
                session_id=session_id,
                stream=True,
            )
            
            # Afficher la r√©ponse
            print("üí¨ R√©ponse:")
            for log in AgentEventLogger().log(response):
                if hasattr(log, 'content') and log.content:
                    print(f"  {log.content}", end='', flush=True)
            print("\n")
        
        # Test de requ√™te directe sur la base vectorielle
        print("\nüîç Test de requ√™te directe sur la base vectorielle...")
        query_result = client.vector_io.query(
            vector_db_id=VECTOR_DB_ID,
            query="informations importantes",
        )
        
        if query_result and hasattr(query_result, 'results'):
            print(f"‚úÖ {len(query_result.results)} r√©sultats trouv√©s")
            for i, result in enumerate(query_result.results[:3], 1):  # Afficher les 3 premiers
                print(f"  R√©sultat {i}: {result.content[:100]}...")
        else:
            print("‚ÑπÔ∏è  Aucun r√©sultat trouv√© (base vide ou requ√™te sans correspondance)")
        
        print("\nüéâ Tests RAG termin√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test RAG: {e}")
        return False

def test_vector_db_operations():
    """Test des op√©rations sur la base vectorielle"""
    
    LLAMA_STACK_URL = os.getenv('LLAMA_STACK_URL', 'http://localhost:8321')
    VECTOR_DB_ID = os.getenv('VECTOR_DB_ID', 'my_milvus_db')
    
    print(f"\nüóÑÔ∏è  Test des op√©rations sur la base vectorielle...")
    
    try:
        client = Client(base_url=LLAMA_STACK_URL)
        
        # Lister les providers disponibles
        print("üìã Providers de base vectorielle disponibles:")
        providers = client.vector_dbs.list_providers()
        for provider in providers:
            print(f"  - {provider}")
        
        # V√©rifier le statut de la base
        print(f"\nüìä Statut de la base '{VECTOR_DB_ID}':")
        try:
            db_info = client.vector_dbs.get(VECTOR_DB_ID)
            print(f"  - ID: {db_info.identifier}")
            print(f"  - Provider: {db_info.provider_id}")
            print(f"  - Mod√®le d'embedding: {db_info.embedding_model}")
            print(f"  - Dimension: {db_info.embedding_dimension}")
        except Exception as e:
            print(f"  - Erreur: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de la base vectorielle: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Test de la fonctionnalit√© RAG avec LlamaStack")
    print("=" * 60)
    
    # Test principal RAG
    rag_success = test_rag_functionality()
    
    # Test des op√©rations sur la base vectorielle
    vector_success = test_vector_db_operations()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    print(f"RAG Functionality: {'‚úÖ SUCCESS' if rag_success else '‚ùå FAILED'}")
    print(f"Vector DB Operations: {'‚úÖ SUCCESS' if vector_success else '‚ùå FAILED'}")
    
    if rag_success and vector_success:
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
    else:
        print("\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
